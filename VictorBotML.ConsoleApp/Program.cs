// This file was auto-generated by ML.NET Model Builder. 

using System.IO;

namespace VictorBotML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            //Console.Write("Enter folder path: ");
            string path = @"C:\Users\jacob\Desktop\ml_training";
            //var directory = new DirectoryInfo(Console.ReadLine());
            var directory = new DirectoryInfo(path);

            var subDirectories = directory.GetDirectories();

            using (var textWriter = new StreamWriter("train_data.tsv"))
            {
                textWriter.WriteLine("Label\tImageSource");

                foreach (var subDirectory in subDirectories)
                {
                    foreach (var file in subDirectory.GetFiles())
                    {
                        textWriter.WriteLine(subDirectory.Name + "\t" + file.FullName);
                    }
                }
            }

            ModelBuilder.CreateModel("train_data.tsv");

            File.Move("MLModel.zip", @"..\..\..\..\VictorBotML.Model\MLModel.zip");

            //// Create single instance of sample data from first line of dataset for model input
            //ModelInput sampleData = new ModelInput()
            //{
            //    ImageSource = @"C:\Users\jacob\Desktop\ml_training\lewd\001_72671735_p3_33.jpg",
            //};

            //// Make a single prediction on the sample data and print results
            //var predictionResult = ConsumeModel.Predict(sampleData);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...\n\n");
            //Console.WriteLine($"ImageSource: {sampleData.ImageSource}");
            //Console.WriteLine($"\n\nPredicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");
            //Console.ReadKey();
        }
    }
}
